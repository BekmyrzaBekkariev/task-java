public class if2 {
}
/**
	Преобразователь скорости
1. Напишите метод с именем toMilesPerHour, который имеет 1 параметр типа double с именем kilometersPerHour. Этот метод должен возвращать округленное значение вычисления типа long.
				Если параметр kilometersPerHour меньше 0, метод toMilesPerHour должен возвращать -1, чтобы указать недопустимое значение.
				В противном случае, если оно положительное, вычислите значение миль в час, округлите его и верните обратно. Для преобразования и округления ознакомьтесь с примечаниями в тексте ниже.
				Примеры ввода/вывода:
				toMilesPerHour(1.5); → должно возвращать значение 1
				toMilesPerHour(10.25); → должно возвращать значение 6
				toMilesPerHour(-5.6); → должно возвращать значение -1
				toMilesPerHour(25.42); → должно возвращать значение 16
				toMilesPerHour(75.114); → должно возвращать значение 47
				2. Напишите другой метод под названием printConversion с 1 параметром типа double с именем kilometersPerHour.
				Этот метод не должен возвращать ничего (void), и ему необходимо вычислить milesPerHour из параметра kilometersPerHour.
				Затем ему нужно напечатать сообщение в формате "XX км/ч = YY миль/ч".
				XX представляет исходное значение в километрах в час.
				YY представляет собой округленное значение milesPerHour из параметра kilometersPerHour.
				Если параметр kilometersPerHour равен < 0, то выведите текст "Недопустимое значение".
				Примеры ввода/вывода:
				printConversion(1.5); → следует вывести следующий текст (в консоль - System.out): 1,5 км/ч = 1 миля/ч
				printConversion(10.25); → следует вывести следующий текст (в консоль - System.out): 10,25 км/ч = 6 миль/ч
				printConversion(-5.6); → должен быть напечатан следующий текст (в консоль - System.out): Недопустимое значение
				printConversion(25.42); → следует вывести следующий текст (в консоль - System.out): 25,42 км/ч = 16 миль/ч
				printConversion(75.114); → следует вывести следующий текст (в консоль - System.out): 75.114 км/ч = 47 миль/ч
				Используйте метод Math.round, чтобы округлить количество рассчитанных миль в час (удвоить). Метод round возвращает значение long.

				Как использовать метод round и как он работает?
				Math.round() - это встроенный математический метод, который возвращает значение long, наиболее близкое к аргументу. Результат округляется до целого числа путем добавления 1/2, после добавления 1/2 берется нижняя часть результата и преобразуется в тип long. Метод возвращает значение аргумента, округленное до ближайшего значения int.
				ПРИМЕР ИСПОЛЬЗОВАНИЯ:
				двойное число = 1,5;
				длинное округление = Math.round(число);
				System.out.println("округлено= " + округлено);
				System.out.println("с 3.9= " + Math.round(3.9));
				System.out.println("с 4.5= " + Math.round(4.5));
				int sum = 45;
				количество входов = 10;
// приведение к типу, чтобы результат был двойным, например, double / int -> double
				double average = (двойная) сумма / количество;
				длинное округленное среднее значение = математическое.округление(среднее значение);
				System.out.println("среднее значение= " + среднее значение);
				System.out.println("Округленное среднее значение= " + округленное среднее значение);
				выход:
				округлено= 2
				с 3,9= 4
				с 4,5= 5
				среднее значение= 4,5
				Округленное среднее значение= 5
				СОВЕТ: В методе printConversion вызовите метод toMilesPerHour вместо дублирования кода.
				ПРИМЕЧАНИЕ: Все методы должны быть определены как общедоступные статические, как мы делали до сих пор в курсе.
				ПРИМЕЧАНИЕ: 1 миля в час равна 1,609 километра в час
				ПРИМЕЧАНИЕ: Не добавляйте основной метод в код решения. **/
class SpeedConverter {
	public static long toMilesPerHour(double kilometersPerHour) {
		if (kilometersPerHour < 0) {
			return -1;
		}

		return Math.round(kilometersPerHour / 1.609);
	}

	public static void printConversion(double kilometersPerHour) {
		long milesPerHour = toMilesPerHour(kilometersPerHour);

		if (milesPerHour == -1) {
			System.out.println("Invalid Value");
		} else {
			System.out.println(kilometersPerHour + " km/h = " + milesPerHour + " mi/h");
		}
	}
}

